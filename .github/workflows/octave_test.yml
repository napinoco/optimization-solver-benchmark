name: Octave Solver Tests

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'scripts/solvers/octave/**'
      - 'config/octave_config.yaml'
      - '.github/workflows/octave_test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'scripts/solvers/octave/**' 
      - 'config/octave_config.yaml'
      - '.github/workflows/octave_test.yml'
  
  # Allow manual trigger with options
  workflow_dispatch:
    inputs:
      skip_octave_install:
        description: 'Skip Octave installation (assume pre-installed)'
        required: false
        default: false
        type: boolean
      test_timeout:
        description: 'Test timeout in seconds (30-600)'
        required: false
        default: '60'
        type: string
      verbose_testing:
        description: 'Enable verbose test output'
        required: false
        default: false
        type: boolean
      run_integration_tests:
        description: 'Run integration tests (may be slow)'
        required: false
        default: true
        type: boolean
      test_problem_set:
        description: 'Problem set for sample testing'
        required: false
        default: 'SIMPLE_LP'
        type: choice
        options:
          - SIMPLE_LP
          - SIMPLE_QP
          - ALL_SIMPLE

jobs:
  test-octave:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Validate input parameters
      run: |
        # Determine test parameters based on trigger
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          SKIP_INSTALL="${{ github.event.inputs.skip_octave_install }}"
          TEST_TIMEOUT="${{ github.event.inputs.test_timeout }}"
          VERBOSE="${{ github.event.inputs.verbose_testing }}"
          RUN_INTEGRATION="${{ github.event.inputs.run_integration_tests }}"
          PROBLEM_SET="${{ github.event.inputs.test_problem_set }}"
        else
          SKIP_INSTALL="false"
          TEST_TIMEOUT="60"
          VERBOSE="false"
          RUN_INTEGRATION="true"
          PROBLEM_SET="SIMPLE_LP"
        fi
        
        echo "## Octave Test Parameters" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Skip Octave Install**: $SKIP_INSTALL" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Timeout**: ${TEST_TIMEOUT}s" >> $GITHUB_STEP_SUMMARY
        echo "- **Verbose Testing**: $VERBOSE" >> $GITHUB_STEP_SUMMARY
        echo "- **Run Integration Tests**: $RUN_INTEGRATION" >> $GITHUB_STEP_SUMMARY
        echo "- **Problem Set**: $PROBLEM_SET" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Validate timeout is numeric and reasonable
        if ! [[ "$TEST_TIMEOUT" =~ ^[0-9]+$ ]] || [ "$TEST_TIMEOUT" -lt 30 ] || [ "$TEST_TIMEOUT" -gt 600 ]; then
          echo "❌ Invalid timeout: $TEST_TIMEOUT (must be 30-600 seconds)" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        # Export for next steps
        echo "SKIP_OCTAVE_INSTALL=$SKIP_INSTALL" >> $GITHUB_ENV
        echo "TEST_TIMEOUT=$TEST_TIMEOUT" >> $GITHUB_ENV
        echo "VERBOSE_TESTING=$VERBOSE" >> $GITHUB_ENV
        echo "RUN_INTEGRATION_TESTS=$RUN_INTEGRATION" >> $GITHUB_ENV
        echo "TEST_PROBLEM_SET=$PROBLEM_SET" >> $GITHUB_ENV
    
    - name: Install GNU Octave
      if: env.SKIP_OCTAVE_INSTALL != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y octave octave-optim
        octave --version
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/python.txt
    
    - name: Verify Octave installation
      if: env.SKIP_OCTAVE_INSTALL != 'true'
      run: |
        octave --eval "printf('Octave verification: OK\\n');"
        octave --eval "pkg load optim; printf('Optim package: OK\\n');"
    
    - name: Check Octave availability (when installation skipped)
      if: env.SKIP_OCTAVE_INSTALL == 'true'
      run: |
        if command -v octave &> /dev/null; then
          echo "✅ Octave found (pre-installed)" >> $GITHUB_STEP_SUMMARY
          octave --version
          octave --eval "printf('Octave verification: OK\\n');"
          octave --eval "pkg load optim; printf('Optim package: OK\\n');"
        else
          echo "❌ Octave not found and installation was skipped!" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
    
    - name: Test Octave solver
      run: |
        if [ "$VERBOSE_TESTING" = "true" ]; then
          echo "Running Octave solver tests with verbose output..."
          python scripts/solvers/octave/test_octave.py --verbose
        else
          python scripts/solvers/octave/test_octave.py
        fi
    
    - name: Run integration tests
      if: env.RUN_INTEGRATION_TESTS == 'true'
      run: |
        if [ "$VERBOSE_TESTING" = "true" ]; then
          python -m pytest tests/integration/test_octave_integration.py -v -s
        else
          python -m pytest tests/integration/test_octave_integration.py -v
        fi
      continue-on-error: true
    
    - name: Test with sample problems
      run: |
        echo "Testing with problem set: $TEST_PROBLEM_SET"
        echo "Using timeout: $TEST_TIMEOUT seconds"
        
        if [ "$VERBOSE_TESTING" = "true" ]; then
          VERBOSE_FLAG="--verbose"
        else
          VERBOSE_FLAG=""
        fi
        
        # Test Octave solver directly using the test script
        python scripts/solvers/octave/test_octave.py $VERBOSE_FLAG
      continue-on-error: true
      
    - name: Run integration test
      if: env.RUN_INTEGRATION_TESTS == 'true'
      run: |
        echo "Running integration test with main.py..."
        
        # Test Octave solver through main interface with minimal problem set
        if [ "$VERBOSE_TESTING" = "true" ]; then
          python main.py --benchmark --solvers "octave" --problem-set "light_set" --verbose
        else
          python main.py --benchmark --solvers "octave" --problem-set "light_set"
        fi
      continue-on-error: true
      
    - name: Display test summary
      if: always()
      run: |
        echo "## Octave Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show which tests were run
        echo "### Tests Executed" >> $GITHUB_STEP_SUMMARY
        if [ "$SKIP_OCTAVE_INSTALL" = "true" ]; then
          echo "- ✅ Used pre-installed Octave" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ Installed Octave from packages" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- ✅ Octave solver unit tests" >> $GITHUB_STEP_SUMMARY
        
        if [ "$RUN_INTEGRATION_TESTS" = "true" ]; then
          echo "- ✅ Integration tests" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⏭️ Integration tests (skipped)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- ✅ Sample problem tests ($TEST_PROBLEM_SET)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show test configuration
        echo "### Test Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Timeout**: ${TEST_TIMEOUT}s" >> $GITHUB_STEP_SUMMARY
        echo "- **Verbose**: $VERBOSE_TESTING" >> $GITHUB_STEP_SUMMARY
        echo "- **Problem Set**: $TEST_PROBLEM_SET" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show environment info with detailed Ubuntu version and timezone
        echo "### Environment" >> $GITHUB_STEP_SUMMARY
        UBUNTU_VERSION=$(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)
        echo "- **OS**: $UBUNTU_VERSION (ubuntu-latest resolved)" >> $GITHUB_STEP_SUMMARY
        echo "- **Kernel**: $(uname -r)" >> $GITHUB_STEP_SUMMARY
        echo "- **Python**: 3.12" >> $GITHUB_STEP_SUMMARY
        TIMEZONE_INFO=$(cat /etc/timezone 2>/dev/null || timedatectl show --property=Timezone --value 2>/dev/null || echo "UTC")
        echo "- **Server Timezone**: $TIMEZONE_INFO" >> $GITHUB_STEP_SUMMARY
        echo "- **Current Time**: $(date '+%Y-%m-%d %H:%M:%S %Z (UTC%z)')" >> $GITHUB_STEP_SUMMARY
        if command -v octave &> /dev/null; then
          OCTAVE_VERSION=$(octave --version | head -1)
          echo "- **Octave**: $OCTAVE_VERSION" >> $GITHUB_STEP_SUMMARY
        fi

# macOS and Windows jobs disabled to speed up CI runtime
# Re-enable by uncommenting if cross-platform testing is needed

#  test-octave-macos:
#    runs-on: macos-latest
#    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#    
#    - name: Set up Python
#      uses: actions/setup-python@v5
#      with:
#        python-version: '3.12'
#    
#    - name: Install GNU Octave (macOS)
#      run: |
#        brew install octave
#        octave --version
#    
#    - name: Install Python dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements/python.txt
#    
#    - name: Test Octave solver (macOS)
#      run: |
#        python scripts/solvers/octave/test_octave.py
#      continue-on-error: true

#  test-octave-windows:
#    runs-on: windows-latest
#    
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v4
#    
#    - name: Set up Python
#      uses: actions/setup-python@v5
#      with:
#        python-version: '3.12'
#    
#    - name: Install GNU Octave (Windows)
#      run: |
#        choco install octave.portable
#        octave --version
#      continue-on-error: true
#    
#    - name: Install Python dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install -r requirements/python.txt
#    
#    - name: Test Octave solver (Windows)  
#      run: |
#        python scripts/solvers/octave/test_octave.py
#      continue-on-error: true