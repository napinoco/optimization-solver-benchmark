name: Deploy to GitHub Pages

# Automatically deploy benchmark reports when main branch is updated
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      solvers:
        description: 'Comma-separated list of solvers to benchmark'
        required: false
        default: 'scipy,cvxpy,highs,osqp'
        type: string
      problem_set:
        description: 'Problem set to use for benchmarking'
        required: false
        default: 'standard_set'
        type: choice
        options:
          - standard_set
          - light_set
          - full_set
      timeout:
        description: 'Solver timeout in seconds (10-3600)'
        required: false
        default: '300'
        type: string

# Allow only one concurrent deployment
concurrency:
  group: pages-deploy
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'

permissions:
  contents: write  # Allow pushing to gh-pages branch
  pages: read
  id-token: write

jobs:
  deploy-pages:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: |
          requirements/base.txt
          requirements/python.txt
        
    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        echo "VIRTUAL_ENV=${VIRTUAL_ENV}" >> $GITHUB_ENV
        echo "${VIRTUAL_ENV}/bin" >> $GITHUB_PATH
        
    - name: Install dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/python.txt
        
    - name: Validate environment
      run: |
        source venv/bin/activate
        python main.py --validate
        
    - name: Run benchmark
      run: |
        source venv/bin/activate
        
        # Use manual inputs if provided, otherwise use defaults for main branch
        SOLVERS="${{ github.event.inputs.solvers || 'scipy,cvxpy,highs,osqp' }}"
        PROBLEM_SET="${{ github.event.inputs.problem_set || 'standard_set' }}"
        TIMEOUT="${{ github.event.inputs.timeout || '300' }}"
        
        echo "## Main Branch Benchmark Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: main" >> $GITHUB_STEP_SUMMARY
        echo "- **Solvers**: ${SOLVERS}" >> $GITHUB_STEP_SUMMARY
        echo "- **Problem Set**: ${PROBLEM_SET}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timeout**: ${TIMEOUT}s" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Run full benchmark for main branch
        python main.py --benchmark --solvers "${SOLVERS}" --problem-set "${PROBLEM_SET}" --timeout "${TIMEOUT}"
        
    - name: Generate production reports
      run: |
        source venv/bin/activate
        python main.py --report
        
        # Verify reports were generated
        if [ ! -f "docs/index.html" ]; then
          echo "❌ Error: No index.html generated"
          exit 1
        fi
        
        echo "✅ Production reports generated successfully"
        
    - name: Create production metadata
      run: |
        # Create production info file
        cat > docs/production-info.json << EOF
        {
          "branch": "main",
          "commit_sha": "${{ github.sha }}",
          "generated_at": "$(date -Iseconds)",
          "repository": "${{ github.repository }}",
          "workflow_run": "${{ github.run_id }}",
          "solvers": "${{ github.event.inputs.solvers || 'scipy,cvxpy,highs,osqp' }}",
          "problem_set": "${{ github.event.inputs.problem_set || 'standard_set' }}",
          "timeout": "${{ github.event.inputs.timeout || '300' }}"
        }
        EOF
        
    - name: Deploy to GitHub Pages root
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: gh-pages
        folder: docs
        token: ${{ secrets.GITHUB_TOKEN }}
        clean: false  # Don't clean to preserve PR preview subdirectories
        
    - name: Display deployment summary
      run: |
        echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Main site deployed successfully!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Production URL" >> $GITHUB_STEP_SUMMARY
        echo "🔗 https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: main" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Benchmark**: ${{ github.event.inputs.solvers || 'scipy,cvxpy,highs,osqp' }} with ${{ github.event.inputs.problem_set || 'standard_set' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Generated**: $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Available Reports" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 [Dashboard](https://napinoco.github.io/optimization-solver-benchmark/) - Main benchmark overview" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ [Solver Comparison](https://napinoco.github.io/optimization-solver-benchmark/solver_comparison.html) - Performance comparison" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 [Problem Analysis](https://napinoco.github.io/optimization-solver-benchmark/problem_analysis.html) - Problem insights" >> $GITHUB_STEP_SUMMARY
        echo "- 📈 [Results Matrix](https://napinoco.github.io/optimization-solver-benchmark/results_matrix.html) - Problems × Solvers matrix" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 [Statistical Analysis](https://napinoco.github.io/optimization-solver-benchmark/statistical_analysis.html) - Advanced analytics" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ [Performance Profiling](https://napinoco.github.io/optimization-solver-benchmark/performance_profiling.html) - Performance metrics" >> $GITHUB_STEP_SUMMARY
        echo "- 🖥️ [Environment Info](https://napinoco.github.io/optimization-solver-benchmark/environment_info.html) - System specifications" >> $GITHUB_STEP_SUMMARY