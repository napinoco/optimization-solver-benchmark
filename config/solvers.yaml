# Minimal Solver Configuration for Fair Baseline Benchmarking
# Uses native solver defaults with only essential parameters
# Comprehensive parameter templates available in: config/backend_templates/

# Configuration schema version
schema_version: "2.0"

# Global solver settings
global_settings:
  default_timeout: 300
  enable_diagnostics: true
  parameter_validation: true
  performance_monitoring: true

# Solver definitions - minimal configuration for fair comparison
solvers:
  scipy:
    name: "SciPy"
    environment: "python"
    version: "auto"  # will be detected at runtime
    methods:
      - "linprog"  # for LP problems
      - "minimize"  # for QP problems
    timeout: 300  # seconds
    enabled: true
    
  # CVXPY backends - using native defaults for fair baseline comparison
  clarabel_cvxpy:
    name: "CLARABEL (via CVXPY)"
    environment: "python"
    backend: "CLARABEL"
    supported_types: ["LP", "QP", "SOCP", "SDP"]
    
    # Minimal configuration - let solver use native defaults
    solver_options:
      verbose: false           # Disable verbose output
    
    # No problem-specific optimizations for baseline
    problem_optimizations: {}
    
    timeout: 300
    enabled: true
    
  scs_cvxpy:
    name: "SCS (via CVXPY)"
    environment: "python"
    backend: "SCS"
    supported_types: ["LP", "QP", "SOCP", "SDP"]
    
    # Minimal configuration - let solver use native defaults
    solver_options:
      verbose: false          # Disable verbose output
    
    # No problem-specific optimizations for baseline
    problem_optimizations: {}
    
    timeout: 300
    enabled: true
    
  ecos_cvxpy:
    name: "ECOS (via CVXPY)"
    environment: "python"
    backend: "ECOS"
    supported_types: ["LP", "QP", "SOCP"]
    
    # Minimal configuration - let solver use native defaults
    solver_options:
      verbose: false          # Disable verbose output
    
    # No problem-specific optimizations for baseline
    problem_optimizations: {}
    
    timeout: 300
    enabled: true
    
  osqp_cvxpy:
    name: "OSQP (via CVXPY)"
    environment: "python"
    backend: "OSQP"
    supported_types: ["QP", "SOCP"]
    
    # Minimal configuration - let solver use native defaults
    solver_options:
      verbose: false          # Disable verbose output
    
    # No problem-specific optimizations for baseline
    problem_optimizations: {}
    
    timeout: 300
    enabled: true
    
  qsqp_cvxpy:
    name: "QSQP (via CVXPY)"
    environment: "python"
    backend: "QSQP"
    supported_types: ["QP"]
    
    # Minimal configuration - let solver use native defaults
    solver_options:
      verbose: false          # Disable verbose output
    
    timeout: 300
    enabled: true
    
  cbc_cvxpy:
    name: "CBC (via CVXPY)"
    environment: "python"
    backend: "CBC"
    supported_types: ["LP"]
    
    # Minimal configuration - let solver use native defaults
    solver_options:
      verbose: false          # Disable verbose output
    
    timeout: 300
    enabled: true
    
  glop_cvxpy:
    name: "GLOP (via CVXPY)"
    environment: "python"
    backend: "GLOP"
    supported_types: ["LP"]
    
    # Minimal configuration - let solver use native defaults
    solver_options:
      verbose: false          # Disable verbose output
    
    timeout: 300
    enabled: true
    
  cvxopt_cvxpy:
    name: "CVXOPT (via CVXPY)"
    environment: "python"
    backend: "CVXOPT"
    supported_types: ["LP", "QP", "SOCP"]
    
    # Minimal configuration - let solver use native defaults
    solver_options:
      verbose: false          # Disable verbose output
    
    timeout: 300
    enabled: true
    
  # Octave Environment Solvers
  octave_linprog:
    name: "Octave LinProg"
    environment: "octave"
    solver_type: "linprog"
    supported_types: ["LP"]
    
    # Octave-specific configuration
    octave_path: null  # Auto-detect if null
    options:
      method: "interior-point"
      display: "off"
      max_iterations: 1000
      tolerance: 1e-8
    
    timeout: 300
    enabled: true
    
  octave_quadprog:
    name: "Octave QuadProg"
    environment: "octave"
    solver_type: "quadprog"
    supported_types: ["QP"]
    
    # Octave-specific configuration
    octave_path: null  # Auto-detect if null
    options:
      method: "interior-point"
      display: "off"
      max_iterations: 1000
      tolerance: 1e-8
    
    timeout: 300
    enabled: false  # Disabled by default until Octave is installed